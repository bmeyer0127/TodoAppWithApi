@namespace ApiRequestComponents.TodoGetAll
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer
@using TodoGui.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System
@using System.Linq
@using MyComponents.SingleTodo
@using ApiRequestComponents.TodoPost

<div class="container">
    <div class="row">
        <div class="col-10">
            <div class="input-group pt-3 pb-3">
                <input type="text" class="form-control" placeholder="Search Todo Titles" @bind="searchInput" @bind:event="oninput" />
            </div>
        </div>
        <div class="col-2">
            <TodoPost OnSubmit="HandleSubmit"/>
        </div>
    </div>
</div>

@if (searchInput != null && searchInput != "")
{
    foreach (var todo in todos.Where(i => i.Title.Contains(searchInput)).OrderBy(i => i.Id))
    {
        <SingleTodo Id="@todo.Id"
                    Title="@todo.Title"
                    TodoOwner="@todo.TodoOwner"
                    Description="@Description(todo.Description)"
        isCompleted="@todo.isCompleted" />
    }
    if (todos.Where(i => i.Title.Contains(searchInput)).Count() == 0)
    {
        <h2>No Search Results :/</h2>
    }
}

@if (todos is not null && searchInput == "")
{    
    foreach(var todo in todos)
    {
        <SingleTodo Id="@todo.Id"
                    Title="@todo.Title"
                    TodoOwner="@todo.TodoOwner"
                    Description="@Description(todo.Description)"
                    isCompleted="@todo.isCompleted" />
    }
}
@code{
    private IEnumerable<Todo>? todos = new List<Todo>();
    private bool getTodosError;
    private string searchInput = "";

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7262/api/todo");
        request.Headers.Add("Accept", "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            todos = await JsonSerializer.DeserializeAsync<IEnumerable<Todo>>(responseStream, options);
        }
        else
        {
            getTodosError = true;
        }
    }

    private string? Description(string description)
    {
        if (description is null || description == "")
        {
            return ("N/A");
        }
        return description;
    }

    private async void HandleSubmit()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7262/api/todo");
        request.Headers.Add("Accept", "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            todos = await JsonSerializer.DeserializeAsync<IEnumerable<Todo>>(responseStream, options);
        }
        else
        {
            getTodosError = true;
        }
    }
}