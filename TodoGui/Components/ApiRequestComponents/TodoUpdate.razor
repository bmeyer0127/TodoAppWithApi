@namespace ApiRequestComponents.TodoUpdate
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using TodoGui.Models

<button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target=@($"#modalId-{todo.Id}")>Edit</button>

<div id=@($"modalId-{todo.Id}") class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title">Update this?</h1>
                <button type="button" class="btn btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="input-group p-1">
                    <input type="text" class="form-control post-input" @bind="todo.Title" />
                </div>
                <div class="input-group p-1">
                    <textarea type="text" class="form-control post-input" @bind="todo.Description" style="resize: none" rows="2" />
                </div>
                <div class="input-group p-1">
                    <input type="text" class="form-control post-input" @bind="todo.TodoOwner"/>
                </div>
                <div class="input-group p-1">
                    @{isChecked = todo.isCompleted ? true : false;}
                    <p class="pe-2">Completed?</p>
                    <input class="form-check-input checkbox" type="checkbox" @bind="isChecked" id="isCompletedCheckbox" />
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <button class="btn btn-outline-danger" data-bs-dismiss="modal" @onclick="() => UpdateItemAsync(todo)">Save</button>
            </div>
        </div>
    </div>
</div>

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.BottomLeft" />

@code {
    [Parameter] public EventCallback OnUpdate { get; set; }
    [Parameter] public Todo? todo { get; set; }

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage() => messages.Add(CreateToastMessage());

    private ToastMessage CreateToastMessage()
    => new ToastMessage
        {
            Type = ToastType.Success,
            Title = "Successfully Updated Todo Item!",
            Message = "That item got altered to high hell!"
        };

    public bool isChecked;

    public async Task UpdateItemAsync(Todo todo)
    {
        var client = ClientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Put, $"https://localhost:7262/api/todo/")
            {
                Content = new StringContent(JsonSerializer.Serialize(todo), System.Text.Encoding.UTF8, "application/json")
            };

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            await OnUpdate.InvokeAsync();
            ShowMessage();

            
        }
    }
}