@namespace TodoGetAll
@inject IHttpClientFactory ClientFactory
@using System.Text.Json
@using System.Text.Json.Serialization
@using TodoGui.Models
@using SingleTodo

@if (todos is not null)
{    
    foreach(var todo in todos)
    {
        <SingleTodo 
            Id="@todo.Id"
            Title="@todo.Title"
            TodoOwner="@todo.TodoOwner"
            Description="@Description(todo.Description)"
            isCompleted="@todo.isCompleted"/>
    }
}-
@code{
    private IEnumerable<Todo>? todos = new List<Todo>();
    private bool getTodosError;
    private bool shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7262/api/todo");
        request.Headers.Add("Accept", "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            todos = await JsonSerializer.DeserializeAsync<IEnumerable<Todo>>(responseStream, options);
        }
        else
        {
            getTodosError = true;
        }
        shouldRender = true;
    }

    private string? Description(string description)
    {
        if (description is null || description == "")
        {
            return ("N/A");
        }
        return description;
    }
}